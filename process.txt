CGM 數據分析工具 - 開發日誌

本文件記錄了 CGM 數據分析工具的開發和修改過程。

1. 初始設置
   - 創建 main.py 文件
   - 安裝必要的庫：streamlit, pandas, numpy, matplotlib, seaborn

2. 主要功能實現
   a. 文件上傳功能
      - 實現 read_file 函數，支持 CSV 和 Excel 文件
      - 添加文件格式檢查和錯誤處理

   b. 數據處理
      - 合併 'Date' 和 'Time' 列創建 'Timestamp' 列
      - 實現數據預處理功能

   c. 指標計算
      - 實現 calculate_metrics 函數
      - 計算血糖水平百分比、CV、平均血糖、GMI 和 GRI

   d. 視覺化
      - 實現 create_agp 函數生成 Ambulatory Glucose Profile
      - 設置 y 軸範圍為 40-400 mg/dL
      - 添加目標範圍標記（70-180 mg/dL）

3. 用戶界面優化
   - 使用 Streamlit 組件美化界面
   - 添加側邊欄使用說明
   - 優化數據展示格式

4. 錯誤處理和穩定性提升
   - 添加輸入驗證
   - 完善錯誤信息顯示

5. 性能優化
   - 優化大數據集的處理速度

6. 文檔編寫
   - 創建 README.md（本文件）
   - 添加詳細的使用說明和功能描述

7. 版本控制
   - 初始化 Git 倉庫
   - 創建 .gitignore 文件

8. 部署準備
   - 創建 requirements.txt 文件
   - 測試在不同環境下的運行情況

9. 持續改進
   - 根據用戶反饋進行功能調整和 bug 修復
   - 定期更新依賴庫版本

注意事項：
- 確保上傳的文件包含正確的列名：'Date', 'Time', 'Sensor Glucose (mg/dL)'
- 使用 Python 3.7 或更高版本
- 建議在虛擬環境中運行此程序

如何運行：
1. 安裝依賴：pip install -r requirements.txt
2. 運行程序：streamlit run main.py

如有任何問題或建議，請聯繫開發者。

最後更新：[當前日期]


## 2024-9-23 23:27:


當然，我很樂意為您總結這個 CGM 數據分析工具程式修改的過程。以下是我們進行的主要修改步驟：

1. 初始設置：
   - 創建了基本的 Streamlit 應用程序結構
   - 實現了文件上傳和數據讀取功能

2. 數據處理：
   - 確保 `df['Date']` 和 `df['Time']` 列的數據類型正確
   - 將 Date 和 Time 列合併為 Timestamp 列

3. 指標計算：
   - 實現了 `calculate_metrics` 函數，計算各種血糖指標
   - 將所有指標的顯示精確度調整為小數點後一位

4. 視覺化：
   - 實現了 `create_agp` 函數，創建 Ambulatory Glucose Profile 圖表
   - 開發了 `create_daily_clusters` 函數，生成 Clinically Similar Clusters 圖表

5. Clinically Similar Clusters 圖表優化：
   - 調整了柱狀圖的堆疊順序，使其從上到下依次為：Time > 250、TAR、TIR、TBR、Time < 50
   - 為不同的血糖範圍分配了對應的顏色：紅、橙、綠、黃、藍
   - 修正了圖例的順序，使其與柱狀圖的堆疊順序一致
   - 將圖例放置在圖表的右側

6. 用戶界面優化：
   - 添加了使用說明在側邊欄
   - 優化了分析結果的展示方式

7. 代碼結構優化：
   - 將主要功能模塊化，便於維護和擴展

整個過程中，我們不斷根據您的反饋和需求調整代碼，以提高數據分析工具的可用性和可讀性。最終實現了一個功能完整、視覺效果良好的 CGM 數據分析工具。

如果您需要更詳細的說明或者有任何其他問題，請隨時告訴我。


NEXT: use gpt-4 to analyze the cgm with insulin dose and pharmacokinetics

###2024-9-24 09:08:

初始問題識別：
我們發現在執行深度分析時出現了幾個錯誤，主要包括：
嘗試從不存在的 Streamlit secrets 中讀取 OpenAI API 密鑰
在數據處理過程中出現 'Meal' 列不存在的錯誤
遇到數據類型不兼容的錯誤，主要是日期時間和浮點數混合使用導致的
第一次修改 - 解決 API 密鑰和 'Meal' 列問題：
我們對 deep_analysis.py 文件進行了以下修改：
移除了從 Streamlit secrets 讀取 API 密鑰的代碼
修改了分析飲食影響的函數，改用索引匹配來確定飲食事件的時間點
更正了生成 GPT-4 分析的函數中的模型名稱
第二次修改 - 解決數據類型不兼容問題：
在 deep_analysis.py 文件中進行了以下修改：
在分析胰島素藥代動力學和飲食影響的函數中，將時間差計算結果直接轉換為小時數（浮點數）
移除了將時間差轉換為小時的輔助函數
將安全的最小值和最大值函數中的返回值改為數值類型，以保持一致性
最終結果：
經過這些修改後，深度分析功能應該能夠正常運作，不再出現之前的錯誤。主要改進包括：
解決了 API 密鑰讀取問題
修正了飲食數據處理方法
統一了時間相關數據的處理方式，避免了數據類型不兼容的問題
這些修改應該能夠使 CGM 數據分析應用程序的深度分析功能更加穩定和可靠。如果在實際運行中仍然遇到問題，可能需要進一步檢查數據格式和處理邏輯。

2024.10.3
 更改 insulin dose輸入，和輪入框問題； 



##2024.10.5 new GRI_RAG

1. 初始化和數據準備：
   - 創建 `ReferenceDatabase` 實例，從指定目錄加載參考 PDF 文件。
   - 使用 PyMuPDF (fitz) 從 PDF 中提取文本。
   - 使用 SentenceTransformer 將提取的文本轉換為向量。
   - 使用 FAISS 創建向量索引。

2. 血糖數據分析：
   - 創建 `GRIAnalyzer` 實例，傳入血糖數據和參考數據庫。
   - 計算血糖相關指標，包括 GRI（血糖風險指數）。

3. 查詢生成和相關性搜索：
   - 基於計算出的 GRI 值構建查詢。
   - 使用向量索引在參考數據庫中搜索相關文本。

4. GPT-4 分析：
   - 使用 OpenAI API 調用 GPT-4 模型。
   - 將血糖分析結果和相關參考文本作為輸入。
   - 生成專業的分析和建議。

5. 結果格式化：
   - 將 GRI 值和 GPT-4 生成的分析結果組合成 Markdown 格式的文本。

6. 返回結果：
   - 將格式化的分析結果返回給調用函數。

這個過程結合了傳統的數據分析方法（計算 GRI）、檢索增強生成（RAG）技術（使用參考數據庫）和大型語言模型（GPT-4），以提供全面且專業的血糖管理分析和建議。

NEXT: 胰島素數據分析 圖示中，long/short color  一致，要改
       胰島素注射統計 要改
       其他 RAG, ex AGP分析，TIR，CV .. 

##2024.10.7

1. GRI 分析和繪圖：這涉及 gri_rag.py 和 gri_plotting.py 文件。
RAG 深度分析：主要在 deep_analysis.py 中實現。


##2020.10.8

1. 詳細血糖變異性分析 (agp_variability.py)
   - 使用 GPT-4 Vision API 分析 AGP 圖表
     * 評估 50% 和 90% 百分位數陰影區域的寬度
     * 分析不同時間段的血糖變異性和不穩定性
   - 分析低血糖事件
   - 分析高血糖事件
   - 使用 GPT-4 模型提供詳細的低血糖和高血糖評估

2. 結果展示 (main.py)
   - 顯示基本血糖指標
   - 顯示標準差（SD）、變異係數（CV）和 MAGE
   - 顯示 AGP 圖表分析結果
   - 顯示低血糖和高血糖分析結果
   - 展示 AGP 圖和每日血糖聚類圖
   - 在 deep_analysis.py 中：
      重命名了 generate_gpt4_summary 函數為 insulin_glucose_interaction。
      修改了 perform_deep_analysis 函數，移除了 meal_impact 分析，因為它還沒有準備好。
      調整了 perform_deep_analysis 函數的參數列表和返回結果的結構。(不重覆調 gpt4)
   
   but lcoal runr error:  GRIAnalyzer.__init__() missing 1 required positional argument: 'reference_db'
下回處理